[alias]

	#
	# git status
	#
	# Regular status
	st = status
	# View the current working tree status using the short format
	s = status -s

	#
	# git commit
	#
	# Regular commit
	#
	# Add to staging area
	a = add
	# Amend the currently staged files to the latest commit
	amend = commit --amend --no-edit
	ci = commit
	# git commit session
  	cai = "!f() { git add . && git commit; }; f"
	# Commits using gitmoji
	ce = !bash -c 'gitmoji -c'
	# git commit session using gitmoji
  	cae = "!f() { git add . && gitmoji -c; }; f"
	# Commits everything with message
	cma = commit -a -m
	# Commits only what's been staged for commit using the branch prefix on the message
	cmp = "!f() { branch=`git branch | awk '{if ($1 == \"*\"){print $2}}' | awk -F '_' '{print $1}'`; git commit -m \"$branch $1\"; }; f"
	# Commits EVERYTHING using the branch prefix on the message
	cmap = "!f() { branch=`git branch | awk '{if ($1 == \"*\"){print $2}}' | awk -F '_' '{print $1}'`; git commit -a -m \"$branch $1\"; }; f"

	#
	# git checkout
	#
	# Regular checkout
	co = checkout
	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	#
	# git log
	#
	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = "!l() { git log --pretty=oneline -n 20 --graph --abbrev-commit | emojify; }; l"
	# Count commits ahead of a given branch
	cc = "!c() { git rev-list --count $1..HEAD; }; c"
	cd = "!c() { git rev-list --count develop..HEAD; }; c"
	cm = "!c() { git rev-list --count master..HEAD; }; c"
  	# git log -<count>
  	lc = "!f() { count=`git rev-list --count $1..HEAD`; echo \"Showing $count commits\\n\"; git log -n $count; }; f"

	#
	# git pull / push
	#
	# Pull in remote changes for the current repository and all its submodules
	wipe = "!w() { git branch -D $1 && git push origin :$1; }; w"
	# Pull
	pl = "!f() { git pull --rebase origin $(git symbolic-ref --short HEAD); }; f"
	# Push
  	ph = "!f() { git push origin $(git symbolic-ref --short HEAD); }; f"
	# Push force
  	phf = "!f() { git push --force-with-lease origin $(git symbolic-ref --short HEAD); }; f"

	#
	# git diff
	#
	# Show the diff between the latest commit and the current state
	d = !"d() { git diff --patch-with-stat HEAD~0; }; git diff-index --quiet HEAD -- || clear; d"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	#
	# git branch
	#
	br = branch
	branches = branch -a
	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	#
	# Rewriting history
	#
	cp = cherry-pick
	# Interactive rebase with the given number of latest commits
	r = "!r() { git rebase -i --autosquash --committer-date-is-author-date HEAD~$1; }; r"
	# ~/bin/git-fixup
	f = fixup

	#
	# Searching for stuff
	#
	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"
	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"
	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	#
	# Common commands
	#
	# Clone a repository including all submodules
	c = clone --recursive
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	remotes = remote -v
	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# List aliases
	aliases = config --get-regexp alias
	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"
	# List contributors with number of commits
	contributors = shortlog --summary --numbered
	# Show the user email for the current repository.
	whoami = config user.email

	# Creates a branch for ESH development with the given JIRA ticket as suffix and description
	esh = !"f() { desc=`echo \"$2\" | sed 's/ /_/g'`; git checkout -b ESH-\"$1\"_$desc; }; f"

[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]

	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = green
	changed = yellow
	untracked = cyan

[commit]

	# https://help.github.com/articles/signing-commits-using-gpg/
	gpgSign = true

[diff]

	# Detect copies as well as renames
	renames = copies

[diff "bin"]

	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]

	# Include summaries of merged commits in newly created merge commit messages
	log = true

[push]

	# https://git-scm.com/docs/git-config#git-config-pushdefault
	default = simple
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true

[user]

	email = crism60@gmail.com
	name = "Cristian Miranda"
  	signingkey = "E78F28F43BE4B38B"

[url "git@github.com:"]

	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

	insteadOf = "github:"

[url "git@gist.github.com:"]

	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

	insteadOf = "gist:"

[filter "lfs"]

	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

[gpg]

	program = gpg

[tag]

	forceSignAnnotated = false

[fixup]

	menu = fzf --height '60%' \
             --bind 'tab:toggle-preview' \
             --preview 'git show --color {+1}' \
             --preview-window=up:80% \
             --prompt 'Select commit: '
	commit = true

[core]

  pager = "{                                                         \
    COLUMNS=$(tput cols);                                            \
    if [ $COLUMNS -ge 80 ] && [ -z $FZF_PREVIEW_COLUMNS ]; then      \
        delta -w $COLUMNS;                                           \
    elif [ $COLUMNS -ge 160 ] && [ ! -z $FZF_PREVIEW_COLUMNS ]; then \
        delta -w $FZF_PREVIEW_COLUMNS;                               \
    else                                                             \
        delta;                                                       \
    fi                                                               \
  }"

[interactive]

	diffFilter = delta --color-only

[delta]

    features = line-numbers decorations
    syntax-theme = OneHalfDark
    plus-style = syntax "#003800"
    minus-style = syntax "#3f0001"
    side-by-side = true

[delta "decorations"]

    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul
    file-decoration-style = none
    hunk-header-decoration-style = cyan box ul

[delta "line-numbers"]

    line-numbers-left-style = cyan
    line-numbers-right-style = cyan
    line-numbers-minus-style = 124
    line-numbers-plus-style = 28

[safe]

	directory = /opt/flutter
