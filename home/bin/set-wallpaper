#!/usr/bin/env python3

import os
import osascript
import platform
import subprocess
import sys

sys.path.append(os.popen("echo $HOME").read().strip())

import click
import yaml
from dotfiles.scripts.utils import config


@click.command()
@click.option("--random", is_flag=True)
@click.option("--wide", is_flag=True)
@click.option("--use-config", is_flag=True)
@click.argument("wallpaper", required=False)
def setWallpaper(random, wide, use_config, wallpaper):

    data = config.getConfig()
    wallpapers = data["path"]["wallpaper"]

    if platform.system() == "Linux":
        if random:
            os.popen("set-random-wallpaper")
        elif use_config:
            monitors = int(os.popen('xrandr --listmonitors | grep "+" | wc -l').read())
            if monitors == 2:
                if wide:
                    wallpaper = wallpapers["dual"]
                    os.popen("hsetroot -root -cover {}".format(wallpaper))
                else:
                    wallpaper = wallpapers["single"]
                    os.popen("hsetroot -screens 1 -cover {}".format(wallpaper))
            elif monitors == 1:
                wallpaper = wallpapers["single"]
                os.popen("hsetroot -root -cover {}".format(wallpaper))
        else:
            monitors = int(os.popen('xrandr --listmonitors | grep "+" | wc -l').read())
            if monitors == 2:
                if wide:
                    os.popen("hsetroot -root -cover {}".format(wallpaper))
                else:
                    os.popen("hsetroot -screens 1 -cover {}".format(wallpaper))
            elif monitors == 1:
                os.popen("hsetroot -root -cover {}".format(wallpaper))

    else:
        if random:
            wallpaper = wallpapers["single"]

        osascript.run(
            'tell application "System Events" to tell every desktop to set picture to "{}"'.format(
                wallpaper
            )
        )


if __name__ == "__main__":
    setWallpaper()
