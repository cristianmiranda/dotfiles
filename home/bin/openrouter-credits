#!/usr/bin/env python3
"""
Check OpenRouter credit balance
"""
import json
import subprocess
import sys
import requests
import argparse

def get_api_key():
    """Get OpenRouter API key from secrets"""
    try:
        result = subprocess.run(
            ["/home/cmiranda/bin/reveal-secret", "OPENROUTER_API_KEY"],
            capture_output=True,
            text=True,
            check=True
        )
        api_key = result.stdout.strip()
        if not api_key:
            print("Error: OPENROUTER_API_KEY not found in secrets")
            sys.exit(1)
        return api_key
    except subprocess.CalledProcessError as e:
        print(f"Error retrieving API key: {e}")
        sys.exit(1)

def check_credits(api_key):
    """Check OpenRouter credit balance"""
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }

    try:
        # Make request to OpenRouter API
        response = requests.get(
            "https://openrouter.ai/api/v1/credits",
            headers=headers
        )

        # Check if request was successful
        response.raise_for_status()

        # Parse and return the response
        return response.json()
    except requests.exceptions.RequestException:
        # Return None to indicate API request failure
        return None

def format_credits(credits_data):
    """Format credits data for display"""
    try:
        # Pretty print the full response for debugging
        print(json.dumps(credits_data, indent=2))

        # Extract and display the most relevant information based on the API documentation
        if "data" in credits_data:
            data = credits_data["data"]
            total_credits = data.get("total_credits", 0)
            total_usage = data.get("total_usage", 0)
            remaining = total_credits - total_usage

            print(f"\nCredit Summary:")
            print(f"  Total Credits: {total_credits}")
            print(f"  Total Usage:   {total_usage}")
            print(f"  Remaining:     {remaining}")
        else:
            print("\nCredit information not found in response")
    except Exception as e:
        print(f"Error formatting credit information: {e}")

def format_credits_pretty(credits_data):
    """Format credits data for pretty display (used by polybar)"""
    try:
        if "data" in credits_data:
            data = credits_data["data"]
            total_credits = data.get("total_credits", 0)
            total_usage = data.get("total_usage", 0)
            remaining = total_credits - total_usage

            # Format numbers
            numbers_string = f"{remaining:.4f}"

            # Prepend status based on total_credits
            if remaining < 5:
                print(f"LOW {numbers_string}")
            else:
                print(f"OK {numbers_string}")
        else:
            print("--") # Indicate error state or missing data
    except Exception as e:
        print("--") # Indicate formatting error or missing data

def main():
    """Main function"""
    # Add argument parsing
    parser = argparse.ArgumentParser(description='Check OpenRouter credit balance')
    parser.add_argument('--pretty', action='store_true', help='Output in pretty format for polybar')
    args = parser.parse_args()

    if not args.pretty:
        print("Checking OpenRouter credits...")

    api_key = get_api_key()
    credits_data = check_credits(api_key)

    # Handle API request failure
    if credits_data is None:
        if args.pretty:
            print("--")
        else:
            # Print error to stderr
            print("Error: Could not retrieve credits from OpenRouter API.", file=sys.stderr)
        sys.exit(1) # Exit with error status if API failed

    # Proceed if API request was successful
    if args.pretty:
        format_credits_pretty(credits_data)
    else:
        format_credits(credits_data)

if __name__ == "__main__":
    main()

