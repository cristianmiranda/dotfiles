#!/bin/bash

# Defaults
IDLE_LIMIT=600     # in seconds (10 min)
CHECK_INTERVAL=10  # in seconds
DEBUG=false        # Set to true to enable debug messages

LOG_FILE="$HOME/logs/inactivity-watcher.log"

# Ensure log directory exists
if [ ! -d "$(dirname "$LOG_FILE")" ]; then
    mkdir -p "$(dirname "$LOG_FILE")"
fi

# Help and usage information
show_help() {
    cat << EOF
Usage: $(basename "$0") [OPTIONS]

A monitor for system inactivity that manages screen locking and DPMS.

Options:
  -h, --help             Show this help message and exit
  -d, --debug            Enable debug messages (writes to ${LOG_FILE})
  -s, --status           Show current status (idle time, audio, fullscreen)
  -a, --active           Check if user is currently active (returns 0 if active, 1 if inactive)
  -c, --check-interval N Set the check interval in seconds (default: $CHECK_INTERVAL)
  -l, --limit N          Set the idle limit in seconds (default: $IDLE_LIMIT)

When run without options, the script runs in daemon mode monitoring inactivity.
EOF
    exit 0
}

# Logging functions
log_debug() {
    if [[ "$DEBUG" == "true" ]]; then
        local timestamp=$(date +'%Y-%m-%d %H:%M:%S')
        echo "${timestamp} [DEBUG] $1" | tee -a "$LOG_FILE" >&2
    fi
}

log_info() {
    local timestamp=$(date +'%Y-%m-%d %H:%M:%S')
    echo "${timestamp} [INFO] $1" | tee -a "$LOG_FILE"
}

log_separator() {
    if [[ "$DEBUG" == "true" ]]; then
        echo -e "\033[36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m" | tee -a "$LOG_FILE" >&2
    fi
}

# Status formatting function
format_status_output() {
    local status=$1
    local description=$2

    echo "  Status: $([ "$status" -eq 1 ] && echo "ACTIVE" || echo "INACTIVE")"
    [ -n "$description" ] && echo "  $description"
}

# Activity check functions
get_idle_time() {
    local idle_ms=$(xprintidle)
    echo $((idle_ms / 1000))
}

check_audio_input() {
    local is_active=0
    local recording_apps=0
    local active_recordings=0
    local uncorked_recordings=0
    local app_names=""

    # Check for applications recording audio (source outputs)
    recording_apps=$(pactl list source-outputs 2>/dev/null | wc -l)
    if [ "$recording_apps" -gt 0 ]; then
        app_names=$(pactl list source-outputs 2>/dev/null | grep -E 'application.name|application.process.binary' | tr -d '\t')
        active_recordings=$(pactl list source-outputs 2>/dev/null | grep -c "state: RUNNING")
        uncorked_recordings=$(pactl list source-outputs 2>/dev/null | grep -c "Corked: no")

        if [ "$active_recordings" -gt 0 ] || [ "$uncorked_recordings" -gt 0 ]; then
            is_active=1
        fi
    fi

    if [ "$SHOW_STATUS" = "true" ]; then
        echo "Audio Input:"
        echo "  Recording applications: $recording_apps"
        echo "  Active recordings: $active_recordings"
        echo "  Uncorked recordings: $uncorked_recordings"
        [ -n "$app_names" ] && echo "  Applications: $app_names"
        format_status_output "$is_active"
    else
        echo $is_active
    fi
}

check_coffee() {
    local is_active=0
    local coffee_pid=$(pgrep -f "coffee" 2>/dev/null)

    if [ -n "$coffee_pid" ]; then
        is_active=1
    fi

    if [ "$SHOW_STATUS" = "true" ]; then
        echo "Coffee Process:"
        format_status_output "$is_active" "$([ -n "$coffee_pid" ] && echo "PID: $coffee_pid")"
    else
        echo $is_active
    fi
}

check_fullscreen() {
    local fullscreen=0
    local fullscreen_info=""

    # Use wmctrl to find fullscreen windows and log their names
    while read -r line; do
        if [ -n "$line" ]; then
            fullscreen=1
            fullscreen_info="${fullscreen_info}${line}\n"
        fi
    done < <(wmctrl -l | while read -r win _; do
        xprop -id "$win" _NET_WM_STATE 2>/dev/null | grep -q _NET_WM_STATE_FULLSCREEN &&
        xprop -id "$win" WM_CLASS WM_NAME 2>/dev/null | sed "s/^/$win /"
    done)

    # Log fullscreen window information if any found
    if [ "$SHOW_STATUS" = "true" ]; then
        echo "Fullscreen:"
        if [ "$fullscreen" -eq 1 ] && [ -n "$fullscreen_info" ]; then
            echo "  Detected windows:"
            echo -e "$fullscreen_info" | while read -r line; do
                [ -n "$line" ] && echo "    $line"
            done
        else
            echo "  No fullscreen windows detected"
        fi
        format_status_output "$fullscreen"
    else
        if [ "$fullscreen" -eq 1 ] && [ -n "$fullscreen_info" ] && [ "$DEBUG" = "true" ]; then
            log_debug "Fullscreen windows detected:"
            echo -e "$fullscreen_info" | while read -r line; do
                [ -n "$line" ] && log_debug "  $line"
            done
        fi
        echo $fullscreen
    fi
}

# DPMS control functions
manage_dpms() {
    local action=$1
    local reason=$2

    case "$action" in
        enable)
            xset +dpms
            xset s on
            log_debug "Enabled DPMS and screensaver ($reason)"
            return 0
            ;;
        disable)
            xset -dpms
            xset s off
            log_debug "Disabled DPMS and screensaver ($reason)"
            return 0
            ;;
        reset)
            xset dpms force on
            log_debug "Reset DPMS timer ($reason)"
            return 0
            ;;
        off)
            xset dpms force off
            log_debug "Turned off monitor ($reason)"
            return 0
            ;;
        *)
            log_debug "Unknown DPMS action: $action"
            return 1
            ;;
    esac
}

# Screen lock functions
is_i3lock_running() {
    if pgrep -x "i3lock" > /dev/null; then
        return 0  # True, i3lock is running
    else
        return 1  # False, i3lock is not running
    fi
}

handle_inactivity() {
    if is_i3lock_running; then
        log_debug "i3lock already running, turning off monitor instead of locking"
        manage_dpms "off" "extended idle time"
    else
        log_debug "Executing lock-screen command"
        $HOME/bin/lock-screen
        log_debug "Lock-screen command executed, sleeping for 5s"
        sleep 5  # avoid double lock if the mouse moves very little
    fi
}

# Check if any activity indicators suggest the user is active
is_user_active() {
    local idle_seconds=$1
    local audio_input=$2
    local fullscreen=$3
    local coffee_active=$4

    # Consider user active if any of the following are true:
    # 1. User interaction within the idle limit
    # 2. Audio being played/recorded
    # 3. Fullscreen application is running
    # 4. Coffee process is running
    if [[ $idle_seconds -lt $IDLE_LIMIT || $audio_input -gt 0 || $fullscreen -gt 0 || $coffee_active -gt 0 ]]; then
        return 0  # True, user is active
    else
        return 1  # False, user is inactive
    fi
}

# Get reason for current activity status
get_activity_reason() {
    local idle_seconds=$1
    local audio_input=$2
    local fullscreen=$3
    local coffee_active=$4

    if [[ $idle_seconds -lt $IDLE_LIMIT ]]; then
        echo "Recent user activity (${idle_seconds}s ago)"
    elif [[ $audio_input -gt 0 ]]; then
        echo "Active audio input"
    elif [[ $fullscreen -gt 0 ]]; then
        echo "Fullscreen application"
    elif [[ $coffee_active -gt 0 ]]; then
        echo "Coffee process active"
    else
        echo "Unknown (possible race condition)"
    fi
}

# Get appropriate next action based on current state
get_next_action() {
    local is_active=$1
    local is_locked=$2
    local dpms_enabled=$3
    local has_special_activity=$4  # Audio/fullscreen/coffee activity
    local idle_seconds=$5
    local time_until_inactivity=$6

    if [[ "$is_locked" == "true" ]]; then
        if [[ $idle_seconds -ge $((IDLE_LIMIT + 60)) ]]; then
            echo "Turn off monitor"
        else
            echo "Monitor will turn off in $((IDLE_LIMIT + 60 - idle_seconds))s"
        fi
    elif [[ "$is_active" == "true" ]]; then
        if [[ "$has_special_activity" == "true" ]]; then
            if [[ "$dpms_enabled" == "true" ]]; then
                echo "Disable DPMS (special activity detected)"
            else
                echo "DPMS already disabled (special activity detected)"
            fi
        else
            if [[ "$dpms_enabled" == "false" ]]; then
                echo "Enable DPMS (no special activity)"
            else
                echo "DPMS already enabled (no special activity)"
            fi
        fi
    else # Inactive, not locked
        if [[ "$dpms_enabled" == "false" ]]; then
            echo "Enable DPMS (user inactive)"
        elif [[ $idle_seconds -ge $IDLE_LIMIT ]]; then
            echo "Lock screen now"
        else
            echo "Lock screen in ${time_until_inactivity}s"
        fi
    fi
}

# Perform the next action
perform_next_action() {
    local action=$1
    local dpms_enabled_ref=$2

    case "$action" in
        "Turn off monitor")
            manage_dpms "off" "extended idle time"
            ;;
        "Disable DPMS"*)
            manage_dpms "disable" "special activity detected"
            eval $dpms_enabled_ref=false
            ;;
        "Enable DPMS"*)
            manage_dpms "enable" "no special activity or user inactive"
            eval $dpms_enabled_ref=true
            ;;
        "Lock screen now")
            log_info "Locking screen after ${IDLE_SECONDS}s idle"
            handle_inactivity
            ;;
        *)
            # No action needed for "DPMS already..." or "Monitor will turn off..." or "Lock screen in..."
            ;;
    esac
}

# Get all activity indicators in one function
check_all_activity() {
    local show_status=${1:-false}

    local SHOW_STATUS=$show_status
    local idle_seconds=$(get_idle_time)
    local audio_input=$(SHOW_STATUS=$show_status check_audio_input)
    local fullscreen=$(SHOW_STATUS=$show_status check_fullscreen)
    local coffee_active=$(SHOW_STATUS=$show_status check_coffee)

    echo "$idle_seconds $audio_input $fullscreen $coffee_active"
}

# Show detailed status of the system
show_status() {
    local activity_data=($(check_all_activity false))
    local idle_seconds=${activity_data[0]}
    local audio_input=${activity_data[1]}
    local fullscreen=${activity_data[2]}
    local coffee_active=${activity_data[3]}

    local lockscreen_status=$(is_i3lock_running && echo "LOCKED" || echo "UNLOCKED")
    local dpms_status=$(xset q | grep -A 1 "DPMS is" | head -1 | awk '{print $3}')

    echo "System Status:"
    echo "  Current idle time: ${idle_seconds}s / ${IDLE_LIMIT}s"
    echo "  Screen lock: $lockscreen_status"
    echo "  Audio input active: $([ "$audio_input" -eq 1 ] && echo "YES" || echo "NO")"
    echo "  Fullscreen active: $([ "$fullscreen" -eq 1 ] && echo "YES" || echo "NO")"
    echo "  Coffee active: $([ "$coffee_active" -eq 1 ] && echo "YES" || echo "NO")"
    echo "  DPMS status: $dpms_status"

    # These functions will output their own status when SHOW_STATUS=true
    SHOW_STATUS=true
    check_audio_input > /dev/null
    check_fullscreen > /dev/null
    check_coffee > /dev/null

    # Determine overall status
    echo
    echo "Overall Status:"

    local status_reason=""
    if is_i3lock_running; then
        echo "  LOCKED (i3lock is running)"
        status_reason="Screen locked by i3lock"
    else
        if is_user_active "$idle_seconds" "$audio_input" "$fullscreen" "$coffee_active"; then
            echo "  ACTIVE (user is considered active)"
            status_reason=$(get_activity_reason "$idle_seconds" "$audio_input" "$fullscreen" "$coffee_active")
        else
            echo "  INACTIVE (user is considered inactive)"
            status_reason="Idle timeout"
            if [[ $idle_seconds -ge $IDLE_LIMIT ]]; then
                echo "  PENDING LOCK (idle threshold exceeded)"
            fi
        fi
    fi

    echo "  Reason: $status_reason"
}

# Check active status and return exit code
check_active_status() {
    local activity_data=($(check_all_activity false))
    local idle_seconds=${activity_data[0]}
    local audio_input=${activity_data[1]}
    local fullscreen=${activity_data[2]}
    local coffee_active=${activity_data[3]}

    if is_user_active "$idle_seconds" "$audio_input" "$fullscreen" "$coffee_active"; then
        echo "ACTIVE"
        return 0
    else
        echo "INACTIVE"
        return 1
    fi
}

# Main function - monitor inactivity and handle screen locking
monitor_inactivity() {
    log_info "Inactivity watcher started (idle limit: ${IDLE_LIMIT}s, check interval: ${CHECK_INTERVAL}s)"
    if [[ "$DEBUG" == "true" ]]; then
        log_info "Debug logging enabled (writing to $LOG_FILE)"
    fi

    # Track DPMS state
    local dpms_enabled=true

    while true; do
        log_separator

        # Get all activity metrics at once
        local activity_data=($(check_all_activity false))
        local IDLE_SECONDS=${activity_data[0]}
        local AUDIO_INPUT_ACTIVE=${activity_data[1]}
        local FULLSCREEN_ACTIVE=${activity_data[2]}
        local COFFEE_ACTIVE=${activity_data[3]}

        # Log activity metrics
        log_debug "Current idle time: ${IDLE_SECONDS}s / ${IDLE_LIMIT}s"
        log_debug "Audio input active: $AUDIO_INPUT_ACTIVE"
        log_debug "Fullscreen active: ${FULLSCREEN_ACTIVE}"
        log_debug "Coffee active: ${COFFEE_ACTIVE}"

        # Calculate time until inactivity
        local time_until_inactivity=$((IDLE_LIMIT - IDLE_SECONDS))
        local time_until_inactivity_display=$([ $time_until_inactivity -gt 0 ] && echo "${time_until_inactivity}s" || echo "0s (exceeded)")

        # Determine overall status
        local activity_status="INACTIVE"
        local status_reason="Idle timeout"
        local is_locked=false
        local has_special_activity=false

        # Check if screen is already locked
        if is_i3lock_running; then
            activity_status="LOCKED"
            status_reason="Screen locked by i3lock"
            is_locked=true
        else
            # Determine if any special activity is present (for DPMS management)
            if [[ $AUDIO_INPUT_ACTIVE -gt 0 || $FULLSCREEN_ACTIVE -gt 0 || $COFFEE_ACTIVE -gt 0 ]]; then
                has_special_activity=true
            fi

            # Check if user is active
            if is_user_active "$IDLE_SECONDS" "$AUDIO_INPUT_ACTIVE" "$FULLSCREEN_ACTIVE" "$COFFEE_ACTIVE"; then
                activity_status="ACTIVE"
                status_reason=$(get_activity_reason "$IDLE_SECONDS" "$AUDIO_INPUT_ACTIVE" "$FULLSCREEN_ACTIVE" "$COFFEE_ACTIVE")
            fi
        fi

        # Determine next action based on the current state
        local next_action=$(get_next_action \
            "$([[ $activity_status == "ACTIVE" ]] && echo true || echo false)" \
            "$is_locked" \
            "$dpms_enabled" \
            "$has_special_activity" \
            "$IDLE_SECONDS" \
            "$time_until_inactivity_display")

        # Perform the determined action
        perform_next_action "$next_action" "dpms_enabled"

        # Log summary with color-coded status
        local status_color=""
        case "$activity_status" in
            "ACTIVE")  status_color="\033[32m" ;; # Green
            "INACTIVE") status_color="\033[33m" ;; # Yellow
            "LOCKED") status_color="\033[31m" ;; # Red
            *) status_color="\033[0m" ;; # Default
        esac

        if [[ "$DEBUG" == "true" ]]; then
            local timestamp=$(date +'%Y-%m-%d %H:%M:%S')
            echo -e "${timestamp} [DEBUG] \033[1m[${status_color}${activity_status}\033[0m\033[1m] |\033[0m REASON: \033[35m${status_reason}\033[0m | NEXT ACTION: \033[36m${next_action}\033[0m | DPMS: \033[34m$([ "$dpms_enabled" == true ] && echo "Enabled" || echo "Disabled")\033[0m" | tee -a "$LOG_FILE" >&2
        fi

        sleep $CHECK_INTERVAL
    done
}

# Parse command-line arguments
SHOW_STATUS=false

# Process options
while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            show_help
            ;;
        -d|--debug)
            DEBUG=true
            shift
            ;;
        -s|--status)
            show_status
            exit $?
            ;;
        -a|--active)
            check_active_status
            exit $?
            ;;
        -c|--check-interval)
            CHECK_INTERVAL="$2"
            shift 2
            ;;
        -l|--limit)
            IDLE_LIMIT="$2"
            shift 2
            ;;
        *)
            echo "Unknown option: $1"
            show_help
            ;;
    esac
done

# If no specific action was requested, run in daemon mode
monitor_inactivity
