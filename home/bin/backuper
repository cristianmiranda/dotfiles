#!/usr/bin/env python3

import os
import sys

# Absolute home path so that root can use this
sys.path.append("/home/cmiranda")

import click
import yaml
from dotfiles.scripts.utils import config


@click.command()
@click.argument("box")
@click.option("--backup/--restore", default=True, help="Backup/Restore mode")
def backuper(box, backup):
    """
    Personal Backup/Restore manager for unix based boxes\n
    IMPORTANT: Run with sudo to ensure ALL files are backed up / restored
    """
    conf = config.getConfig()["backup"]

    if backup:
        doBackup(conf, box)
    else:
        doRestore(conf, box)


def doBackup(conf, box):
    remote = conf["remote"]

    tmp = "/tmp/backup_tmp_manifest.txt"

    with open(tmp, "w") as outfile:
        outfile.write("\n".join(conf["box"][box]["items"]))

    output = os.popen(
        "rsync --files-from={} -avr -R --delete -e 'ssh -p {}' / {}@{}:{}/{}".format(
            tmp, remote["port"], remote["username"], remote["host"], remote["path"], box
        )
    ).read()

    print(output)


def doRestore(conf, box):
    remote = conf["remote"]
    local = conf["local"]

    warning = """
    This will restore a copy of backed up data for box >> {} << and overwrite your data !!!"
    """.format(
        box
    )

    print(warning)
    input("Press Enter to continue...")

    output = os.popen(
        "rsync -av -e 'ssh -p {}' {}@{}:{}/{}/ /".format(
            remote["port"], remote["username"], remote["host"], remote["path"], box,
        )
    ).read()

    print(output)


if __name__ == "__main__":
    backuper()
